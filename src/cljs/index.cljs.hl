(page "index.html"
      (:require
        [clojure.string :as string]
        [tiples.core :as tiples]
        [tiples.login :as login]))

(defc= capability-names (reduce
                         (fn [v i]
                             (conj v (name i)))
                         []
                         login/capabilities))
(def route (route-cell))

(defn redo-route [cn r]
      (let [r (if r
                (subs r 1)
                "")]
           (if (some (fn [x] (= x r)) cn)
             r
             (if (empty? cn) nil (cn 0)))))
(defc= reroute (redo-route capability-names route))
(defn opening
      []
      (reset! login/started true))

(def do-welcome
      (div
        :css {:display "none"}
        :toggle (cell= (= reroute "welcome"))
        (h2 (text "Hello ~{(:full-name (:welcome login/user-data))}."))))

(def do-contacts
      (div
        :css (:display "none")
        :toggle (cell= (= reroute "contacts"))
        "hi!"))

(def dispatch (atom []))

(defn add-welcome []
      (swap! dispatch conj do-welcome))
(defn add-contacts []
      (swap! dispatch conj do-contacts))


(add-welcome)
(add-contacts)



(tiples/on-open opening)

(tiples/start!)

(html
  (head
    (link :href "main.css" :rel "stylesheet"))
  (body
    (div
      :css {:display "none"}
      :toggle login/show-app?
      (table (tr
               (for-tpl [capability capability-names]
                        (td (if-tpl (cell= (= capability reroute))
                                    (strong capability)
                                    (a :href (cell= (str "/#" capability)) capability))
                            " | "))
               (td (form
                     :submit #(login/logout!)
                     (button :type "submit" "log off")))))
      (div @dispatch))

    (login/login-div)))
