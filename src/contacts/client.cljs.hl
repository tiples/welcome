(ns contacts.client
  (:require
    [clojure.string :as string]
    [tiples.client :as tiples]
    [tiples.login :as login]))

(defc= my-contacts
       (if login/common-data
         (:contacts login/common-data)
         nil)
       (partial swap! login/common-data assoc :contacts))

(defn delete-contact [contact]
      (tiples/chsk-send! [:contacts/delete {:contact contact}]))

(defmethod tiples/chsk-recv :contacts/deleted
           [id contact]
           (.log js/console "deleted contact")
           (swap! my-contacts disj contact))

(defmethod tiples/chsk-recv :contacts/added
           [id contact]
           (.log js/console "added contact")
           (swap! my-contacts conj contact))

(defn add-contact [contact]
      (tiples/chsk-send! [:contacts/add {:contact contact}]))

(defn middle-name [{:keys [middle middle-initial]}]
      (cond
        middle (str " " middle)
        middle-initial (str " " middle-initial ".")))

(defn display-name [{:keys [first last] :as contact}]
      (str last ", " first (middle-name contact)))

(defelem contact-list [{:keys [from sorted-by] :or {sorted-by identity}}]
         (loop-tpl :bindings [contact (cell= (sort-by sorted-by from))]
                   (li (span (cell= (display-name contact)))
                       (button :click #(delete-contact @contact) "Delete"))))

(defn parse-contact [contact-str]
      (let [[first middle last :as parts] (string/split contact-str #"\s+")
            [first last middle] (if (nil? last) [first middle] [first last middle])
            middle (when middle (string/replace middle "." ""))
            c (if middle (count middle) 0)]
           (when (>= (count parts) 2)
                 (cond-> {:first first :last last}
                         (== c 1) (assoc :middle-initial middle)
                         (>= c 2) (assoc :middle middle)))))

(defelem contact-input [{:keys [to]} [label]]
         (let [new-contact (cell "")
               parsed      (cell= (parse-contact new-contact))]
              (div
                (input
                  :value new-contact
                  :input #(reset! new-contact @%))
                (button
                  :click #(when-let [c @parsed]
                                    (dosync (to c)
                                            (reset! new-contact "")))
                  :disabled (cell= (not parsed))
                  label)
                (pre (cell= (pr-str parsed))))))

(def do-contacts
  (div
    :css (:display "none")
    :toggle (cell= (= login/reroute "contacts"))
    (h2 "Contact list")
    (ul (contact-list :from my-contacts :sorted-by :last))
    (contact-input :to add-contact "Add contact")
    (hr)
    (p (em "Note: The Add contact button is disabled until you enter a valid contact.  A valid contact consists of two or three whitespace-delimited names."))
    (a :href "https://github.com/tailrecursion/hoplon-demos/tree/master/contacts" "Source code on Github")))

(defmethod login/add-element :contacts [_] (do-contacts))
