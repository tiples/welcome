(ns profile.client
  (:require
    [tiples.client :as tiples]
    [tiples.login :as login]))

(defc my-profile nil)

(defn watch-user-data [k r o n]
      (reset! my-profile
              (if n
                (:profile n)
                nil)))

(add-watch login/user-data :profile watch-user-data)

(defc= my-phone
       (if my-profile
         (get my-profile :phone "")
         nil)
       (partial swap! my-profile assoc :phone))

(defc= my-email
       (if my-profile
         (get my-profile :email "")
         nil)
       (partial swap! my-profile assoc :email))

(defn submit-user-data []
      (swap! login/user-data assoc :profile @my-profile)
      (tiples/chsk-send! [:profile/update @my-profile]))

(defn reset-user-data []
      (reset! my-profile (:profile @login/user-data)))

(defn disabled? []
      (cell= (= my-profile (:profile login/user-data))))

(def do-profile
  (div
    :css (:display "none")
    :toggle (cell= (= login/reroute "profile"))
    (h2 "Profile")
    (form
      :submit #(submit-user-data)
      (table
        (tr
          (td (label "Phone "))
          (td (input :type "text"
                     :value my-phone
                     :keyup #(reset! my-phone @%))))
        (tr
          (td (label "Email "))
          (td (input :type "text"
                     :value my-email
                     :keyup #(reset! my-email @%))))
        (tr
          (td (button :type "submit"
                      :disabled (disabled?)
                      "submit"))
          (td :style "text-align:right" (button :click #(reset-user-data)
                                                :disabled (disabled?)
                                                "reset"))
          )
        )
      )))

(login/add-element :profile do-profile)
